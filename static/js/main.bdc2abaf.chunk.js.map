{"version":3,"sources":["logoSTC.svg","App.js","reportWebVitals.js","index.js"],"names":["targetNetworkName","process","addrMigrator","initWeb3","provider","web3","Web3","eth","extend","methods","name","call","outputFormatter","utils","hexToNumber","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","App","props","state","web3Modal","Web3Modal","network","cacheProvider","this","cachedProvider","onConnect","then","setState","eula","catch","e","console","log","txInProgress","showErrorMsg","errorMsg","JSON","stringify","a","connect","subscribeProvider","getAccounts","accounts","address","net","getId","networkId","chainId","evalStatus","BN","connected","old_token","approve","pow","sub","send","from","on","migrator_contract","doSwap","Contract","ERC20","abi","new_token","STCSwapper","Promise","all","balanceOf","allowance","getBalance","migrationBonus","d","map","x","oldBalance","newBalance","oldAllowance","migratorETHBalance","migratorSTCV2Balance","I10E18","mul","eligibleForRefund","gte","canSwap","wasApproved","canMigratorRefund","window","location","reload","className","Modal","show","Header","Title","Body","Footer","Button","variant","onClick","src","logoSTC","alt","undefined","Spinner","animation","Alert","size","clearCachedProvider","div","toString","fromWei","isZero","bind","doApprove","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4h1RAAe,G,OAAA,IAA0B,qC,OCiBnCA,EAAoBC,UAGpBC,EAAeD,6CAGrB,SAASE,EAASC,GAChB,IAAMC,EAAO,IAAIC,IAAKF,GAYtB,OAVAC,EAAKE,IAAIC,OAAO,CACdC,QAAS,CACP,CACEC,KAAM,UACNC,KAAM,cACNC,gBAAiBP,EAAKQ,MAAMC,gBAK3BT,EAGT,IAAMU,EAAkB,CACtBC,cAAe,CACbC,QAASC,IACTC,QAAS,CACPC,SAtBWnB,sCAwZFoB,E,kDA5Xb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GACb,EAAKC,UAAY,IAAIC,IAAU,CAC7BC,QAAS1B,EACT2B,eAAe,EACfZ,gBAAiBA,IANF,E,qDAUnB,WAAqB,IAAD,OACda,KAAKJ,UAAUK,eACjBD,KAAKE,YACFC,MAAK,WACJ,EAAKC,SAAS,CAAEC,MAAM,OAEvBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZ,EAAKH,SAAS,CACZM,cAAc,EACdC,cAAc,EACdC,SAAUC,KAAKC,UAAUP,QAI/BP,KAAKI,SAAS,CAAEC,MAAM,M,8DAI1B,wCAAAU,EAAA,sEACyBf,KAAKJ,UAAUoB,UADxC,cACQxC,EADR,gBAEQwB,KAAKiB,kBAAkBzC,GAF/B,cAGQC,EAAOF,EAASC,GAHxB,SAKyBC,EAAKE,IAAIuC,cALlC,cAKQC,EALR,OAMQC,EAAUD,EAAS,GAN3B,UAO0B1C,EAAKE,IAAI0C,IAAIC,QAPvC,eAOQC,EAPR,iBAQwB9C,EAAKE,IAAI6C,UARjC,eAQQA,EARR,iBAUQxB,KAAKyB,WAAWL,EAASG,EAAW9C,GAV5C,eAWQiD,EAAKjD,EAAKQ,MAAMyC,GAAGA,GAX3B,UAaQ1B,KAAKI,SAAS,CAClB3B,OACAiD,GAAIA,EACJlD,WACAmD,WAAW,EACXP,UACAI,UACAD,cApBJ,iD,oHAwBA,qCAAAR,EAAA,sDACQtC,EAAOuB,KAAKL,MAAMlB,KAClBiD,EAAK1B,KAAKL,MAAM+B,GACtB1B,KAAKI,SAAS,CAAEM,cAAc,IAC9BV,KAAKL,MAAMiC,UAAU/C,QAClBgD,QAAQvD,EAAc,IAAIoD,EAAG,GAAGI,IAAI,IAAIJ,EAAG,MAAMK,IAAI,IAAIL,EAAG,KAC5DM,KAAK,CAAEC,KAAMjC,KAAKL,MAAMyB,UACxBc,GAAG,gBAAgB,WAClB,EAAKT,WAAW,EAAK9B,MAAMyB,QAAS,EAAKzB,MAAM4B,UAAW9C,GAC1D,EAAK2B,SAAS,CAAEM,cAAc,OAE/BJ,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZ,EAAKH,SAAS,CACZM,cAAc,EACdC,cAAc,EACdC,SAAUC,KAAKC,UAAUP,QAhBjC,gD,iHAqBA,mCAAAQ,EAAA,sDACQtC,EAAOuB,KAAKL,MAAMlB,KACxBuB,KAAKI,SAAS,CAAEM,cAAc,IAC9BV,KAAKL,MAAMwC,kBAAkBtD,QAC1BuD,SACAJ,KAAK,CAAEC,KAAMjC,KAAKL,MAAMyB,UACxBc,GAAG,gBAAgB,WAClB1B,QAAQC,IAAI,gBACZ,EAAKgB,WAAW,EAAK9B,MAAMyB,QAAS,EAAKzB,MAAM4B,UAAW9C,GAC1D,EAAK2B,SAAS,CAAEM,cAAc,OAE/BJ,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZ,EAAKH,SAAS,CACZM,cAAc,EACdC,cAAc,EACdC,SAAUC,KAAKC,UAAUP,QAhBjC,gD,qHAqBA,WAAiBa,EAASG,EAAW9C,GAArC,2CAAAsC,EAAA,yDACQW,EAAKjD,EAAKQ,MAAMyC,GAAGA,GAjIL,IAkIhBH,EAFN,wBAGUK,EAAY,IAAInD,EAAKE,IAAI0D,SAASC,EAAMC,IAjIlClE,8CAkINmE,EAAY,IAAI/D,EAAKE,IAAI0D,SAASC,EAAMC,IAjIlClE,8CAkIN8D,EAAoB,IAAI1D,EAAKE,IAAI0D,SACrCI,EAAWF,IACXjE,GAPN,SAWYoE,QAAQC,IAAI,CAChBf,EAAU/C,QAAQ+D,UAAUxB,GAASrC,OACrCyD,EAAU3D,QAAQ+D,UAAUxB,GAASrC,OACrC6C,EAAU/C,QAAQgE,UAAUzB,EAAS9C,GAAcS,OACnDN,EAAKE,IAAImE,WAAWxE,GACpB6D,EAAkBtD,QAAQkE,iBAAiBhE,OAC3CyD,EAAU3D,QAAQ+D,UAAUtE,GAAcS,SAjBlD,OAUUiE,EAVV,OAmBMC,KAAI,SAACC,GAAD,OAAO,IAAIxB,EAAGwB,MACdC,EAAaH,EAAE,GACfI,EAAaJ,EAAE,GACfK,EAAeL,EAAE,GACjBM,EAAqBN,EAAE,GACvBD,EAAiBC,EAAE,GACnBO,EAAuBP,EAAE,GAEzBQ,EAAS,IAAI9B,EAAJ,SAAO,GAAM,KAAI+B,IAAI,IAAI/B,EAAJ,SAAO,GAAM,KAC3CgC,EAAoBP,EAAWQ,IAAI,IAAIjC,EAAG,OACtB,EACpBkC,EAAUL,EAAqBI,IACnCR,EAAWM,IAAI,IAAI/B,EAAJ,SAAO,GAAM,MAAK+B,IAAI,IAAI/B,EAAJ,SAAO,GAAM,MAE9CmC,EAAcR,EAAaM,IAAIR,GAErCnD,KAAKI,SAAS,CACZ+B,oBACAP,YACAY,YACAW,aACAC,aACAC,eACAC,qBACAP,iBACAQ,uBACAG,oBACAI,kBAjBwB,MAkBxBF,UACAC,cACAzC,UACAoC,WAlDN,iD,0FAuDA,SAAkBhF,GAAW,IAAD,OACrBA,EAAS0D,KAGd1D,EAAS0D,GAAG,SAAS,WACnB6B,OAAOC,SAASC,QAAO,MAEzBzF,EAAS0D,GAAG,kBAAZ,uCAA+B,WAAOf,GAAP,eAAAJ,EAAA,6DAC7BP,QAAQC,IAAIU,GACNC,EAAUD,EAAS,GAFI,SAGvB,EAAKM,WAAWL,EAAS,EAAKzB,MAAM4B,UAAW,EAAK5B,MAAMlB,MAHnC,2CAA/B,uDAMAD,EAAS0D,GAAG,eAAZ,sBAA4B,sBAAAnB,EAAA,sDAC1BgD,OAAOC,SAASC,QAAO,GADG,4CAG5BzF,EAAS0D,GAAG,iBAAZ,sBAA8B,sBAAAnB,EAAA,sDAC5BgD,OAAOC,SAASC,QAAO,GADK,+C,oBAKhC,WAAU,IAAD,OACP,OACE,sBAAKC,UAAU,MAAf,UACE,eAACC,EAAA,EAAD,CAAOC,KAAMpE,KAAKL,MAAMgB,aAAxB,UACE,cAACwD,EAAA,EAAME,OAAP,UACE,cAACF,EAAA,EAAMG,MAAP,sBAGF,cAACH,EAAA,EAAMI,KAAP,UACE,wCAAWvE,KAAKL,MAAMiB,cAGxB,cAACuD,EAAA,EAAMK,OAAP,UACE,cAACC,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS,WACP,EAAKvE,SAAS,CAAEO,cAAc,KAHlC,qBAWJ,sBAAKuD,UAAU,UAAf,UACE,wBACA,wBACA,wBACA,wBACA,gCACE,qBAAKU,IAAKC,EAASX,UAAU,WAAWY,IAAI,SAC5C,sBAAKZ,UAAU,gBAAf,UACE,4DACqBa,IAApB/E,KAAKL,MAAMU,KACV,cAAC2E,EAAA,EAAD,CAASC,UAAU,SAASP,QAAQ,YACjC1E,KAAKL,MAAMU,KA+CXL,KAAKL,MAAMgC,UA9RN,IAwSN3B,KAAKL,MAAM6B,QACb,eAAC0D,EAAA,EAAD,CAAOR,QAAQ,SAAf,UACG,IADH,4CAGItG,EACA,OAGJ,gCACE,kFACA,gCACG,IADH,sBAEsB4B,KAAKL,MAAMyB,QAAS,IACxC,cAACqD,EAAA,EAAD,CACEC,QAAQ,UACRS,KAAK,KACLR,QAAS,WACP,EAAK/E,UAAUwF,sBACf,EAAKhF,SAAS,CAAEuB,WAAW,KAL/B,+BASU,OAEZ,gCACG,IADH,iBAEiB,IACd3B,KAAKL,MAAMwD,WACTkC,IAAI,IAAIrF,KAAKL,MAAM+B,GAAf,SAAkB,GAAM,KAC5B4D,WAAY,OAEjB,gCACG,IADH,iBAEiB,IACdtF,KAAKL,MAAMlB,KAAKQ,MAAMsG,QAAQvF,KAAKL,MAAMyD,YAAa,OAEzD,gCACG,IADH,6BAE6B,IAC1BpD,KAAKL,MAAMkE,YAAc,KAAO,kBAEnC,gCACG,IADH,+BAE+B,IAC5B7D,KAAKL,MAAMlB,KAAKQ,MAAMsG,QACrBvF,KAAKL,MAAM4D,sBACV,OAEL,mDACmB,IAChBvD,KAAKL,MAAMlB,KAAKQ,MAAMsG,QACrBvF,KAAKL,MAAM2D,oBACV,IAJL,SAOA,2DAC2B,IACxBtD,KAAKL,MAAMlB,KAAKQ,MAAMsG,QAAQvF,KAAKL,MAAMoD,gBAAiB,IAF7D,SAKA,8BACG/C,KAAKL,MAAMoD,eAAeyC,SACvB,wDACAxF,KAAKL,MAAM+D,kBACX,4FACA,wEAGL1D,KAAKL,MAAMwD,WAAWqC,SACrB,cAACN,EAAA,EAAD,CAAOR,QAAQ,UAAf,6CAGG1E,KAAKL,MAAMiE,QAMX5D,KAAKL,MAAMkE,YAcZ7D,KAAKL,MAAMe,aACb,cAACsE,EAAA,EAAD,CAASC,UAAU,SAASP,QAAQ,YAEpC,cAACD,EAAA,EAAD,CACEC,QAAQ,UACRS,KAAK,KACLR,QAAS3E,KAAKoC,OAAOqD,KAAKzF,MAH5B,mCAhBA,8BACGA,KAAKL,MAAMe,aACV,cAACsE,EAAA,EAAD,CAASC,UAAU,SAASP,QAAQ,YAEpC,cAACD,EAAA,EAAD,CACEC,QAAQ,UACRS,KAAK,KACLR,QAAS3E,KAAK0F,UAAUD,KAAKzF,MAH/B,6BAVJ,eAACkF,EAAA,EAAD,CAAOR,QAAQ,SAAf,UACG,IADH,mEAGW,UArFf,8BACE,cAACD,EAAA,EAAD,CACEC,QAAQ,UACRS,KAAK,KACLR,QAAS3E,KAAKE,UAAUuF,KAAKzF,MAH/B,8BAhDF,gCACE,qBAAKkE,UAAU,WAAf,SACE,+BACE,+BACG,IADH,uDAEuD,OAEvD,+BACG,IADH,sDAEsD,OAEtD,kFACA,+BACG,IADH,uEAGkB,OAElB,4DACA,+BACG,IADH,gEAGa,OAEb,iFACA,+BACG,IADH,qGAGgD,OAEhD,+BACG,IADH,0FAGiC,YAIrC,cAACO,EAAA,EAAD,CACEC,QAAQ,UACRS,KAAK,KACLR,QAAS,WACP,EAAKvE,SAAS,CAAEC,MAAM,KAJ1B,sDA+HR,wBACA,wBACA,wBACA,kC,GAtXQsF,aCpCHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB3F,MAAK,YAAkD,IAA/C4F,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bdc2abaf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logoSTC.c5bc01c1.svg\";","import React, { Component } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nimport ERC20 from \"@openzeppelin/contracts/build/contracts/ERC20.json\";\nimport STCSwapper from \"./abi/STCSwapper.json\";\n\nimport \"./App.css\";\nimport logoSTC from \"./logoSTC.svg\";\n\nconst targetNetworkID = +process.env.REACT_APP_TARGET_NETWORK_ID;\nconst targetNetworkName = process.env.REACT_APP_NETWORK_NAME;\nconst addrStcv1 = process.env.REACT_APP_ADDR_STCV1;\nconst addrStcv2 = process.env.REACT_APP_ADDR_STCV2;\nconst addrMigrator = process.env.REACT_APP_ADDR_MIGRATOR;\nconst infuraId = process.env.REACT_APP_INFURA_ID;\n\nfunction initWeb3(provider) {\n  const web3 = new Web3(provider);\n\n  web3.eth.extend({\n    methods: [\n      {\n        name: \"chainId\",\n        call: \"eth_chainId\",\n        outputFormatter: web3.utils.hexToNumber,\n      },\n    ],\n  });\n\n  return web3;\n}\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId,\n    },\n  },\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.web3Modal = new Web3Modal({\n      network: targetNetworkName,\n      cacheProvider: true,\n      providerOptions: providerOptions,\n    });\n  }\n\n  componentDidMount() {\n    if (this.web3Modal.cachedProvider) {\n      this.onConnect()\n        .then(() => {\n          this.setState({ eula: true });\n        })\n        .catch((e) => {\n          console.log(e);\n          this.setState({\n            txInProgress: false,\n            showErrorMsg: true,\n            errorMsg: JSON.stringify(e),\n          });\n        });\n    } else {\n      this.setState({ eula: false });\n    }\n  }\n\n  async onConnect() {\n    const provider = await this.web3Modal.connect();\n    await this.subscribeProvider(provider);\n    const web3 = initWeb3(provider);\n\n    const accounts = await web3.eth.getAccounts();\n    const address = accounts[0];\n    const networkId = await web3.eth.net.getId();\n    const chainId = await web3.eth.chainId();\n\n    await this.evalStatus(address, networkId, web3);\n    const BN = web3.utils.BN.BN;\n\n    await this.setState({\n      web3,\n      BN: BN,\n      provider,\n      connected: true,\n      address,\n      chainId,\n      networkId,\n    });\n  }\n\n  async doApprove() {\n    const web3 = this.state.web3;\n    const BN = this.state.BN;\n    this.setState({ txInProgress: true });\n    this.state.old_token.methods\n      .approve(addrMigrator, new BN(2).pow(new BN(256)).sub(new BN(1)))\n      .send({ from: this.state.address })\n      .on(\"confirmation\", () => {\n        this.evalStatus(this.state.address, this.state.networkId, web3);\n        this.setState({ txInProgress: false });\n      })\n      .catch((e) => {\n        console.log(e);\n        this.setState({\n          txInProgress: false,\n          showErrorMsg: true,\n          errorMsg: JSON.stringify(e),\n        });\n      });\n  }\n\n  async doSwap() {\n    const web3 = this.state.web3;\n    this.setState({ txInProgress: true });\n    this.state.migrator_contract.methods\n      .doSwap()\n      .send({ from: this.state.address })\n      .on(\"confirmation\", () => {\n        console.log(\"confirmation\");\n        this.evalStatus(this.state.address, this.state.networkId, web3);\n        this.setState({ txInProgress: false });\n      })\n      .catch((e) => {\n        console.log(e);\n        this.setState({\n          txInProgress: false,\n          showErrorMsg: true,\n          errorMsg: JSON.stringify(e),\n        });\n      });\n  }\n\n  async evalStatus(address, networkId, web3) {\n    const BN = web3.utils.BN.BN;\n    if (networkId === targetNetworkID) {\n      const old_token = new web3.eth.Contract(ERC20.abi, addrStcv1);\n      const new_token = new web3.eth.Contract(ERC20.abi, addrStcv2);\n      const migrator_contract = new web3.eth.Contract(\n        STCSwapper.abi,\n        addrMigrator\n      );\n\n      const d = (\n        await Promise.all([\n          old_token.methods.balanceOf(address).call(),\n          new_token.methods.balanceOf(address).call(),\n          old_token.methods.allowance(address, addrMigrator).call(),\n          web3.eth.getBalance(addrMigrator),\n          migrator_contract.methods.migrationBonus().call(),\n          new_token.methods.balanceOf(addrMigrator).call(),\n        ])\n      ).map((x) => new BN(x));\n      const oldBalance = d[0];\n      const newBalance = d[1];\n      const oldAllowance = d[2];\n      const migratorETHBalance = d[3];\n      const migrationBonus = d[4];\n      const migratorSTCV2Balance = d[5];\n\n      const I10E18 = new BN(10 ** 10).mul(new BN(10 ** 8));\n      const eligibleForRefund = oldBalance.gte(new BN(1000000));\n      const canMigratorRefund = false; // TODO\n      const canSwap = migratorSTCV2Balance.gte(\n        oldBalance.mul(new BN(10 ** 10)).mul(new BN(10 ** 6))\n      );\n      const wasApproved = oldAllowance.gte(oldBalance);\n\n      this.setState({\n        migrator_contract,\n        old_token,\n        new_token,\n        oldBalance,\n        newBalance,\n        oldAllowance,\n        migratorETHBalance,\n        migrationBonus,\n        migratorSTCV2Balance,\n        eligibleForRefund,\n        canMigratorRefund,\n        canSwap,\n        wasApproved,\n        address,\n        I10E18,\n      });\n    }\n  }\n\n  subscribeProvider(provider) {\n    if (!provider.on) {\n      return;\n    }\n    provider.on(\"close\", () => {\n      window.location.reload(false);\n    });\n    provider.on(\"accountsChanged\", async (accounts) => {\n      console.log(accounts);\n      const address = accounts[0];\n      await this.evalStatus(address, this.state.networkId, this.state.web3);\n    });\n    /* TODO: Make is saner - don't reload the app... */\n    provider.on(\"chainChanged\", async () => {\n      window.location.reload(false);\n    });\n    provider.on(\"networkChanged\", async () => {\n      window.location.reload(false);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Modal show={this.state.showErrorMsg}>\n          <Modal.Header>\n            <Modal.Title>Error</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <p>Error: {this.state.errorMsg}</p>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                this.setState({ showErrorMsg: false });\n              }}\n            >\n              OK\n            </Button>\n          </Modal.Footer>\n        </Modal>\n\n        <div className=\"wrapper\">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div>\n            <img src={logoSTC} className=\"App-logo\" alt=\"logo\" />\n            <div className=\"App-logo-text\">\n              <h2>STCV2 Token migration</h2>\n              {this.state.eula === undefined ? (\n                <Spinner animation=\"border\" variant=\"success\" />\n              ) : !this.state.eula ? (\n                <div>\n                  <div className=\"App-eula\">\n                    <ol>\n                      <li>\n                        {\" \"}\n                        Only access this app if you&aposre a holder of STCV1{\" \"}\n                      </li>\n                      <li>\n                        {\" \"}\n                        NEVER send STCV1 directly to the migration contract{\" \"}\n                      </li>\n                      <li> If you disregarded 2) then contact STC support </li>\n                      <li>\n                        {\" \"}\n                        You need to have ETH in your wallet in order to swap\n                        STCV1 for STCV2{\" \"}\n                      </li>\n                      <li> The swap is irreversible </li>\n                      <li>\n                        {\" \"}\n                        We will swap all of your STCV1 - smaller swaps are\n                        disallowed{\" \"}\n                      </li>\n                      <li> We will ask you to perform 2 ETH transactions </li>\n                      <li>\n                        {\" \"}\n                        When swapping more than 10k STCV1 you will receive a\n                        full/partial gas refund for both transactions{\" \"}\n                      </li>\n                      <li>\n                        {\" \"}\n                        The migration bonus might be changed at any time - right\n                        now the gas refund is 0.01 ETH{\" \"}\n                      </li>\n                    </ol>\n                  </div>\n                  <Button\n                    variant=\"warning\"\n                    size=\"lg\"\n                    onClick={() => {\n                      this.setState({ eula: true });\n                    }}\n                  >\n                    I understand what I&aposm doing\n                  </Button>\n                </div>\n              ) : !this.state.connected ? (\n                <div>\n                  <Button\n                    variant=\"success\"\n                    size=\"lg\"\n                    onClick={this.onConnect.bind(this)}\n                  >\n                    Connect wallet\n                  </Button>\n                </div>\n              ) : this.state.chainId !== targetNetworkID ? (\n                <Alert variant=\"danger\">\n                  {\" \"}\n                  Unsupported network id! Please switch to {\n                    targetNetworkName\n                  }{\" \"}\n                </Alert>\n              ) : (\n                <div>\n                  <div> Double check that you use the correct account </div>\n                  <div>\n                    {\" \"}\n                    Connected account: {this.state.address}{\" \"}\n                    <Button\n                      variant=\"success\"\n                      size=\"sm\"\n                      onClick={() => {\n                        this.web3Modal.clearCachedProvider();\n                        this.setState({ connected: false });\n                      }}\n                    >\n                      Disconnect Wallet\n                    </Button>{\" \"}\n                  </div>\n                  <div>\n                    {\" \"}\n                    STCV1 balance:{\" \"}\n                    {this.state.oldBalance\n                      .div(new this.state.BN(10 ** 2))\n                      .toString()}{\" \"}\n                  </div>\n                  <div>\n                    {\" \"}\n                    STCV2 balance:{\" \"}\n                    {this.state.web3.utils.fromWei(this.state.newBalance)}{\" \"}\n                  </div>\n                  <div>\n                    {\" \"}\n                    Migrators STCV1 allowance:{\" \"}\n                    {this.state.wasApproved ? \"OK\" : \"Insufficient\"}\n                  </div>\n                  <div>\n                    {\" \"}\n                    STCV2 available swap supply:{\" \"}\n                    {this.state.web3.utils.fromWei(\n                      this.state.migratorSTCV2Balance\n                    )}{\" \"}\n                  </div>\n                  <div>\n                    ETH refund pool:{\" \"}\n                    {this.state.web3.utils.fromWei(\n                      this.state.migratorETHBalance\n                    )}{\" \"}\n                    ETH\n                  </div>\n                  <div>\n                    Current migration bonus:{\" \"}\n                    {this.state.web3.utils.fromWei(this.state.migrationBonus)}{\" \"}\n                    ETH\n                  </div>\n                  <div>\n                    {this.state.migrationBonus.isZero()\n                      ? \"Migration bonus was disabled by STC - subsidies ended\"\n                      : this.state.eligibleForRefund\n                      ? \"Eligible for gas refund - at the end of the migration you will receive a small ETH refund\"\n                      : \"You're not eligible for a gas refund - you hold less than 10k STCV1\"}\n                  </div>\n\n                  {this.state.oldBalance.isZero() ? (\n                    <Alert variant=\"success\">\n                      You don t hold any STCV1 tokens\n                    </Alert>\n                  ) : !this.state.canSwap ? (\n                    <Alert variant=\"danger\">\n                      {\" \"}\n                      Migration contract has insufficient STCV2 - contact STC\n                      support.{\" \"}\n                    </Alert>\n                  ) : !this.state.wasApproved ? (\n                    <div>\n                      {this.state.txInProgress ? (\n                        <Spinner animation=\"border\" variant=\"success\" />\n                      ) : (\n                        <Button\n                          variant=\"success\"\n                          size=\"lg\"\n                          onClick={this.doApprove.bind(this)}\n                        >\n                          Approve swap?\n                        </Button>\n                      )}\n                    </div>\n                  ) : this.state.txInProgress ? (\n                    <Spinner animation=\"border\" variant=\"success\" />\n                  ) : (\n                    <Button\n                      variant=\"success\"\n                      size=\"lg\"\n                      onClick={this.doSwap.bind(this)}\n                    >\n                      Swap STCV1 for STCV2?\n                    </Button>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}