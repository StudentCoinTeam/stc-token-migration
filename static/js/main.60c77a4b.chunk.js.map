{"version":3,"sources":["logoSTC.svg","App.js","reportWebVitals.js","index.js"],"names":["initWeb3","provider","web3","Web3","eth","extend","methods","name","call","outputFormatter","utils","hexToNumber","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","process","App","props","state","web3Modal","Web3Modal","cacheProvider","this","cachedProvider","onConnect","then","setState","eula","catch","e","console","log","txInProgress","showErrorMsg","errorMsg","JSON","stringify","a","connect","subscribeProvider","getAccounts","accounts","address","net","getId","networkId","chainId","evalStatus","BN","connected","old_token","approve","chains","addr_migrator","pow","sub","send","from","on","migrator_contract","doSwap","config","Contract","ERC20","abi","addr_stcv1","new_token","addr_stcv2","STCSwapper","Promise","all","balanceOf","allowance","getBalance","migrationBonus","d","map","x","oldBalance","newBalance","oldAllowance","migratorETHBalance","migratorSTCV2Balance","I10E18","mul","eligibleForRefund","gte","canMigratorRefund","isZero","canSwap","wasApproved","window","location","reload","className","Modal","show","Header","Title","Body","Footer","Button","variant","onClick","src","logoSTC","alt","undefined","Spinner","animation","Alert","size","clearCachedProvider","div","toString","fromWei","bind","doApprove","href","target","rel","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60c77a4b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logoSTC.c5bc01c1.svg\";","import React, { Component } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nimport ERC20 from \"@openzeppelin/contracts/build/contracts/ERC20.json\";\nimport STCSwapper from \"./abi/STCSwapper.json\";\n\nimport \"./App.css\";\nimport logoSTC from \"./logoSTC.svg\";\nimport chains from \"./Chains.json\";\n\nconst infuraId = process.env.REACT_APP_INFURA_ID;\n\nfunction initWeb3(provider) {\n  const web3 = new Web3(provider);\n\n  web3.eth.extend({\n    methods: [\n      {\n        name: \"chainId\",\n        call: \"eth_chainId\",\n        outputFormatter: web3.utils.hexToNumber,\n      },\n    ],\n  });\n\n  return web3;\n}\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId,\n    },\n  },\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.web3Modal = new Web3Modal({\n      cacheProvider: true,\n      providerOptions: providerOptions,\n    });\n  }\n\n  componentDidMount() {\n    if (this.web3Modal.cachedProvider) {\n      this.onConnect()\n        .then(() => {\n          this.setState({ eula: true });\n        })\n        .catch((e) => {\n          console.log(e);\n          this.setState({\n            txInProgress: false,\n            showErrorMsg: true,\n            errorMsg: JSON.stringify(e),\n          });\n        });\n    } else {\n      this.setState({ eula: false });\n    }\n  }\n\n  async onConnect() {\n    const provider = await this.web3Modal.connect();\n    await this.subscribeProvider(provider);\n    const web3 = initWeb3(provider);\n\n    const accounts = await web3.eth.getAccounts();\n    const address = accounts[0];\n    const networkId = await web3.eth.net.getId();\n    const chainId = await web3.eth.chainId();\n    await this.evalStatus(address, networkId, web3);\n    const BN = web3.utils.BN.BN;\n\n    await this.setState({\n      web3,\n      BN: BN,\n      provider,\n      connected: true,\n      address,\n      chainId,\n      networkId,\n    });\n  }\n\n  async doApprove() {\n    const web3 = this.state.web3;\n    const BN = this.state.BN;\n    this.setState({ txInProgress: true });\n    this.state.old_token.methods\n      .approve(\n        chains[this.state.networkId].addr_migrator,\n        new BN(2).pow(new BN(256)).sub(new BN(1))\n      )\n      .send({ from: this.state.address })\n      .on(\"confirmation\", () => {\n        this.evalStatus(this.state.address, this.state.networkId, web3);\n        this.setState({ txInProgress: false });\n      })\n      .catch((e) => {\n        console.log(e);\n        this.setState({\n          txInProgress: false,\n          showErrorMsg: true,\n          errorMsg: JSON.stringify(e),\n        });\n      });\n  }\n\n  async doSwap() {\n    const web3 = this.state.web3;\n    this.setState({ txInProgress: true });\n    this.state.migrator_contract.methods\n      .doSwap()\n      .send({ from: this.state.address })\n      .on(\"confirmation\", () => {\n        console.log(\"confirmation\");\n        this.evalStatus(this.state.address, this.state.networkId, web3);\n        this.setState({ txInProgress: false });\n      })\n      .catch((e) => {\n        console.log(e);\n        this.setState({\n          txInProgress: false,\n          showErrorMsg: true,\n          errorMsg: JSON.stringify(e),\n        });\n      });\n  }\n\n  async evalStatus(address, networkId, web3) {\n    const BN = web3.utils.BN.BN;\n    const config = chains[networkId];\n    if (config) {\n      const old_token = new web3.eth.Contract(ERC20.abi, config.addr_stcv1);\n      const new_token = new web3.eth.Contract(ERC20.abi, config.addr_stcv2);\n      const migrator_contract = new web3.eth.Contract(\n        STCSwapper.abi,\n        config.addr_migrator\n      );\n\n      const d = (\n        await Promise.all([\n          old_token.methods.balanceOf(address).call(),\n          new_token.methods.balanceOf(address).call(),\n          old_token.methods.allowance(address, config.addr_migrator).call(),\n          web3.eth.getBalance(config.addr_migrator),\n          migrator_contract.methods.migrationBonus().call(),\n          new_token.methods.balanceOf(config.addr_migrator).call(),\n        ])\n      ).map((x) => new BN(x));\n      const oldBalance = d[0];\n      const newBalance = d[1];\n      const oldAllowance = d[2];\n      const migratorETHBalance = d[3];\n      const migrationBonus = d[4];\n      const migratorSTCV2Balance = d[5];\n\n      const I10E18 = new BN(10 ** 10).mul(new BN(10 ** 8));\n      const eligibleForRefund = oldBalance.gte(new BN(1000000));\n      const canMigratorRefund =\n        migratorETHBalance.gte(migrationBonus) || migrationBonus.isZero();\n      const canSwap = migratorSTCV2Balance.gte(\n        oldBalance.mul(new BN(10 ** 10)).mul(new BN(10 ** 6))\n      );\n      const wasApproved = oldAllowance.gte(oldBalance);\n\n      this.setState({\n        migrator_contract,\n        old_token,\n        new_token,\n        oldBalance,\n        newBalance,\n        oldAllowance,\n        migratorETHBalance,\n        migrationBonus,\n        migratorSTCV2Balance,\n        eligibleForRefund,\n        canMigratorRefund,\n        canSwap,\n        wasApproved,\n        address,\n        I10E18,\n      });\n    }\n  }\n\n  subscribeProvider(provider) {\n    if (!provider.on) {\n      return;\n    }\n    provider.on(\"close\", () => {\n      window.location.reload(false);\n    });\n    provider.on(\"accountsChanged\", async (accounts) => {\n      const address = accounts[0];\n      await this.evalStatus(address, this.state.networkId, this.state.web3);\n    });\n    provider.on(\"chainChanged\", async () => {\n      const web3 = this.state.web3;\n      const networkId = await web3.eth.net.getId();\n      const chainId = await web3.eth.chainId();\n      this.evalStatus(this.state.address, networkId, web3).then(() => {\n        this.setState({ networkId, chainId });\n      });\n    });\n    provider.on(\"networkChanged\", async () => {\n      const web3 = this.state.web3;\n      const networkId = await web3.eth.net.getId();\n      const chainId = await web3.eth.chainId();\n      this.evalStatus(this.state.address, networkId, web3).then(() => {\n        this.setState({ networkId, chainId });\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Modal show={this.state.showErrorMsg}>\n          <Modal.Header>\n            <Modal.Title>Error</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <p>Error: {this.state.errorMsg}</p>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                this.setState({ showErrorMsg: false });\n              }}\n            >\n              OK\n            </Button>\n          </Modal.Footer>\n        </Modal>\n\n        <div className=\"wrapper\">\n          <div>\n            <img src={logoSTC} className=\"App-logo\" alt=\"logo\" />\n            <div className=\"App-logo-text\">\n              {this.state.eula === undefined ? (\n                <Spinner animation=\"border\" variant=\"success\" />\n              ) : !this.state.eula ? (\n                <div>\n                  <div className=\"App-eula\">\n                    <h2 className=\"App-header\">\n                      STC Token v1 to v2 migration app\n                    </h2>\n                    <p className=\"App-using\">\n                      By using the STC Token migration app, you will easily swap\n                      your STC Token to the new updated version. The swap will\n                      be made directly from your wallet, using the secure\n                      connection.\n                    </p>\n                    <p className=\"App-token-information\">\n                      STC Token migration information:\n                    </p>\n                    <ol>\n                      <li>\n                        The swap will give you the same amount of STC Tokens v2\n                        for all STC Tokens v1\n                      </li>\n                      <li>The swap is mandatory and irreversible.</li>\n                      <li>\n                        All of your STC v1 tokens need to be swapped - smaller\n                        swaps are disallowed.\n                      </li>\n                      <li>\n                        While swapping, you will perform two transactions and\n                        pay a fee in ETH.\n                      </li>\n                      <li>\n                        When swapping more than 10 000 STC v1, you will receive\n                        a full/partial ETH gas refund for both transactions.\n                      </li>\n                    </ol>\n\n                    <p className=\"App-code-info\">\n                      The code of the STC Token v1 to v2 migration app can be\n                      reviewed at: &nbsp;\n                      <a\n                        className=\"App-href\"\n                        href=\"https://github.com/StudentCoinTeam/stc-token-migration\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        https://github.com/StudentCoinTeam/stc-token-migration\n                      </a>\n                    </p>\n\n                    <button\n                      className=\"App-button mt-2\"\n                      onClick={() => {\n                        this.setState({ eula: true });\n                      }}\n                    >\n                      Let&apos;s swap my tokens\n                    </button>\n                  </div>\n                </div>\n              ) : !this.state.connected ? (\n                <div>\n                  <button\n                    className=\"App-button mmt-2\"\n                    onClick={this.onConnect.bind(this)}\n                  >\n                    Connect wallet\n                  </button>\n                </div>\n              ) : !chains[this.state.chainId] ? (\n                <div>\n                  <div className=\"alert-message alert-message--error\">\n                    {\" \"}\n                    Unsupported network id! Please switch to mainnet or ropsten{\" \"}\n                  </div>\n                  <Button\n                    variant=\"success\"\n                    size=\"sm\"\n                    onClick={() => {\n                      this.web3Modal.clearCachedProvider();\n                      this.setState({ connected: false });\n                    }}\n                  >\n                    Disconnect Wallet\n                  </Button>{\" \"}\n                </div>\n              ) : this.state.oldBalance.isZero() ? (\n                <div>\n                  <Alert variant=\"success\">\n                    {\" \"}\n                    You don&apos;t hold any STC v1 tokens{\" \"}\n                  </Alert>\n                  <Button\n                    variant=\"success\"\n                    size=\"sm\"\n                    onClick={() => {\n                      this.web3Modal.clearCachedProvider();\n                      this.setState({ connected: false });\n                    }}\n                  >\n                    Disconnect Wallet\n                  </Button>{\" \"}\n                </div>\n              ) : (\n                <div>\n                  <div className=\"align-left mmt-2\">\n                    <p>Please check the details of the connected account:</p>\n                    <div className=\"line-height\">\n                      <p>\n                        {\" \"}\n                        Connected account: {this.state.address}{\" \"}\n                        <Button\n                          variant=\"success\"\n                          size=\"sm\"\n                          onClick={() => {\n                            this.web3Modal.clearCachedProvider();\n                            this.setState({ connected: false });\n                          }}\n                        >\n                          Disconnect Wallet\n                        </Button>{\" \"}\n                      </p>\n                      <p>\n                        Your STC v1 balance to be swapped:&nbsp;\n                        {this.state.oldBalance\n                          .div(new this.state.BN(10 ** 2))\n                          .toString()}\n                      </p>\n                      <p>\n                        Your STC v2 balance:&nbsp;\n                        {this.state.web3.utils.fromWei(this.state.newBalance)}\n                      </p>\n                      <p>\n                        Migrators STCV1 allowance:&nbsp;\n                        {this.state.wasApproved ? \"OK\" : \"Insufficient\"}\n                      </p>\n                      {/* <div>\n                        STC v2 available swap supply:{\" \"}\n                        {this.state.web3.utils.fromWei(\n                          this.state.migratorSTCV2Balance\n                        )}\n                      </div> */}\n                      <p>\n                        ETH refund pool:&nbsp;\n                        {this.state.web3.utils.fromWei(\n                          this.state.migratorETHBalance\n                        )}\n                        ETH\n                      </p>\n                      <p>\n                        Current migration bonus:&nbsp;\n                        {this.state.web3.utils.fromWei(\n                          this.state.migrationBonus\n                        )}{\" \"}\n                        ETH\n                      </p>\n                    </div>\n                    <div>\n                      {this.state.migrationBonus.isZero()\n                        ? \"Migration bonus was disabled by STC - subsidies ended\"\n                        : this.state.eligibleForRefund\n                        ? \"Eligible for gas refund - at the end of the migration you will receive a small ETH refund\"\n                        : \"You're not eligible for a gas refund - you hold less than 10k STC v1\"}\n                    </div>\n                  </div>\n                  {chains[this.state.chainId].name === \"mainnet\" ? null : (\n                    <div className=\"alert-message alert-message--error\">\n                      You&apos;re on testnet\n                    </div>\n                  )}\n                  {this.state.oldBalance.isZero() ? (\n                    <div className=\"alert-message alert-message--error\">\n                      You don&apos;t hold any STC v1 tokens\n                    </div>\n                  ) : !this.state.canSwap ? (\n                    <div className=\"alert-message alert-message--error\">\n                      {\" \"}\n                      Migration contract has insufficient STC v2 to perform the\n                      swap - contact STC support.{\" \"}\n                    </div>\n                  ) : !this.state.canMigratorRefund ? (\n                    <div className=\"alert-message alert-message--error\">\n                      {\" \"}\n                      Migration contract has insufficient ETH to subsidize the\n                      swap - contact STC support.{\" \"}\n                    </div>\n                  ) : !this.state.wasApproved ? (\n                    <div>\n                      {this.state.txInProgress ? (\n                        <Spinner animation=\"border\" variant=\"success\" />\n                      ) : (\n                        <button\n                          className=\"App-button\"\n                          onClick={this.doApprove.bind(this)}\n                        >\n                          Approve swap?\n                        </button>\n                      )}\n                    </div>\n                  ) : this.state.txInProgress ? (\n                    <Spinner animation=\"border\" variant=\"success\" />\n                  ) : (\n                    <button\n                      className=\"App-button\"\n                      onClick={this.doSwap.bind(this)}\n                    >\n                      Swap STC v1 for STC v2?\n                    </button>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}