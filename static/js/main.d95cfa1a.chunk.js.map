{"version":3,"sources":["logoSTC.svg","App.js","reportWebVitals.js","index.js"],"names":["NETWORKS","1","3","initWeb3","provider","web3","Web3","eth","extend","methods","name","call","outputFormatter","utils","hexToNumber","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","App","props","state","eula","web3Modal","Web3Modal","network","cacheProvider","a","this","connect","subscribeProvider","getAccounts","accounts","address","net","getId","networkId","chainId","setState","connected","on","window","location","reload","className","class","src","logoSTC","alt","Alert","variant","Button","size","onClick","onConnect","bind","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d95cfa1a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logoSTC.c5bc01c1.svg\";","import React, {Component} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\n\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nimport './App.css';\nimport logoSTC from './logoSTC.svg';\n\nconst SUPPORTED_NETWORK = 3\nconst NETWORKS = {1: \"mainnet\", 3: \"ropsten\"}\n\nfunction initWeb3(provider: any) {\n  const web3: any = new Web3(provider);\n\n  web3.eth.extend({\n    methods: [\n      {\n        name: \"chainId\",\n        call: \"eth_chainId\",\n        outputFormatter: web3.utils.hexToNumber\n      }\n    ]\n  });\n\n  return web3;\n}\n\nconst providerOptions = {\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          infuraId: '6a994151aa4a42fb89d772c6f1f00db7'\n        }\n      }\n    };\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { eula: false };\n    this.web3Modal = new Web3Modal({\n      network: NETWORKS[SUPPORTED_NETWORK],\n      cacheProvider: false,\n      providerOptions: providerOptions\n    });\n  }\n\n  async onConnect() {\n    const provider = await this.web3Modal.connect();\n\n    await this.subscribeProvider(provider);\n\n    const web3 = initWeb3(provider);\n\n    const accounts = await web3.eth.getAccounts();\n\n    const address = accounts[0];\n\n    const networkId = await web3.eth.net.getId();\n\n    const chainId = await web3.eth.chainId();\n\n    if (networkId === SUPPORTED_NETWORK) {\n\n    }\n\n    await this.setState({\n      web3,\n      provider,\n      connected: true,\n      address,\n      chainId,\n      networkId\n    });\n  }\n\n  subscribeProvider(provider) {\n    if (!provider.on) {\n      return;\n    }\n    /* TODO: Make is saner - don't reload the app... */\n    provider.on(\"close\", () => {window.location.reload(false);});\n    provider.on(\"accountsChanged\", async (accounts: string[]) => {\n      window.location.reload(false);\n    });\n    provider.on(\"chainChanged\", async (chainId: number) => {\n       window.location.reload(false);\n    });\n\n    provider.on(\"networkChanged\", async (networkId: number) => {\n       window.location.reload(false);\n    });\n  };\n\n  render() {\n  return (\n<div className=\"App\">\n<div class=\"wrapper\">\n\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div>\n<img src={logoSTC} className=\"App-logo\" alt=\"logo\" />\n<div className=\"App-logo-text\">\n<h2>STCV2 Token migration</h2>\n{/*\n<h4> STCV1: <a href=\"https://etherscan.io/token/0xb8B7791b1A445FB1e202683a0a329504772e0E52\">0xb8B7791b1A445FB1e202683a0a329504772e0E52</a> </h4>\n<h4> STCV2: <a href=\"https://etherscan.io/token/0x15b543e986b8c34074dfc9901136d9355a537e7e\">0x15b543e986b8c34074dfc9901136d9355a537e7e</a> </h4>\n*/}\n{ !this.state.eula ? (\n<div>\n<div className=\"App-eula\">\n<ol>\n<li> Only access this app if you're a holder of STCV1 </li>\n<li> NEVER send STCV1 directly to the migration contract </li>\n<li> If you disregarded 2) then contact STC support </li>\n<li> You need to have ETH in your wallet in order to swap STCV1 for STCV2 </li>\n<li> The swap is irreversible </li>\n<li> We will swap all of your STCV1 - smaller swaps are disallowed </li>\n<li> We will ask you to perform 2 ETH transactions </li>\n<li> When swapping more than 10k STCV1 you will receive a full/partial gas refund for both transactions </li>\n</ol>\n</div>\n<Button variant=\"warning\" size=\"lg\" onClick={() => {this.setState({eula: true})}}>I understand what I'm doing</Button>\n</div>\n) : !this.state.connected ?\n(\n<div>\n<Button variant=\"success\" size=\"lg\" onClick={this.onConnect.bind(this)}>Connect to wallet</Button>\n</div>\n) : this.state.chainId !== SUPPORTED_NETWORK ?\n(\n    <Alert variant=\"danger\"> Unsupported network id! Please switch to {NETWORKS[SUPPORTED_NETWORK]}  </Alert>\n) :\n(\n<div>\n<div> Double check that you use the correct account </div>\n<div> Connected account: {this.state.address} </div>\n<div> STCV1 balance: {this.state.address} </div>\n<div> STCV2 balance: {this.state.address} </div>\n</div>\n)\n}\n\n</div>\n</div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n\n</div>\n</div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}