{"version":3,"sources":["logoSTC.svg","App.js","reportWebVitals.js","index.js"],"names":["NETWORKS","1","3","STCV1ADDR","STCV2ADDR","MIGRATORADDR","initWeb3","provider","web3","Web3","eth","extend","methods","name","call","outputFormatter","utils","hexToNumber","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","App","props","state","eula","web3Modal","Web3Modal","network","cacheProvider","a","this","connect","subscribeProvider","getAccounts","accounts","address","net","getId","networkId","chainId","evalStatus","BN","setState","connected","old_token","approve","pow","sub","send","from","on","networkID","migrator_contract","doSwap","Contract","ERC20","abi","new_token","STCSwapper","balanceOf","oldBalance","allowance","oldAllowance","getBalance","migratorETHBalance","migratorSTCV2Balance","eligibleForRefund","gte","canSwap","mul","wasApproved","canMigratorRefund","window","location","reload","className","src","logoSTC","alt","Alert","variant","isZero","div","toString","fromWei","Button","size","onClick","bind","doApprove","onConnect","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9670080.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logoSTC.c5bc01c1.svg\";","import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nimport ERC20 from \"@openzeppelin/contracts/build/contracts/ERC20.json\";\nimport STCSwapper from \"./abi/STCSwapper.json\";\n\nimport \"./App.css\";\nimport logoSTC from \"./logoSTC.svg\";\n\nconst SUPPORTED_NETWORK = 3;\nconst NETWORKS = { 1: \"mainnet\", 3: \"ropsten\" };\nconst STCV1ADDR = {\n  1: \"0xb8B7791b1A445FB1e202683a0a329504772e0E52\",\n  3: \"0x2C62E18C667a8794eA7F0A139F1Ab36A4e696286\",\n};\nconst STCV2ADDR = {\n  1: \"0x15b543e986b8c34074dfc9901136d9355a537e7e\",\n  3: \"0x86DC1b4B59E5FA81Ec679B8F108F9b131C60D28A\",\n};\nconst MIGRATORADDR = {\n  1: \"mainnet\",\n  3: \"0xd9bdF7ace5d3b7CE9c0cf5f9CB2E620ea088dDCF\",\n};\n\nfunction initWeb3(provider) {\n  const web3 = new Web3(provider);\n\n  web3.eth.extend({\n    methods: [\n      {\n        name: \"chainId\",\n        call: \"eth_chainId\",\n        outputFormatter: web3.utils.hexToNumber,\n      },\n    ],\n  });\n\n  return web3;\n}\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: \"6a994151aa4a42fb89d772c6f1f00db7\",\n    },\n  },\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { eula: false };\n    this.web3Modal = new Web3Modal({\n      network: NETWORKS[SUPPORTED_NETWORK],\n      cacheProvider: false,\n      providerOptions: providerOptions,\n    });\n  }\n\n  async onConnect() {\n    const provider = await this.web3Modal.connect();\n\n    await this.subscribeProvider(provider);\n\n    const web3 = initWeb3(provider);\n\n    const accounts = await web3.eth.getAccounts();\n\n    const address = accounts[0];\n\n    const networkId = await web3.eth.net.getId();\n\n    const chainId = await web3.eth.chainId();\n\n    await this.evalStatus(address, networkId, web3);\n    const BN = web3.utils.BN.BN;\n\n    await this.setState({\n      web3,\n      BN: BN,\n      provider,\n      connected: true,\n      address,\n      chainId,\n      networkId,\n    });\n  }\n\n  async doApprove() {\n    const web3 = this.state.web3;\n    const BN = this.state.BN;\n    this.state.old_token.methods\n      .approve(\n        MIGRATORADDR[SUPPORTED_NETWORK],\n        new BN(2).pow(new BN(256)).sub(new BN(1))\n      )\n      .send({ from: this.state.address })\n      .on(\"receipt\", () => {\n        this.evalStatus(this.state.address, this.state.networkID, web3);\n      })\n      .on(\"confirmation\", () => {\n        this.evalStatus(this.state.address, this.state.networkID, web3);\n      });\n  }\n\n  async doSwap() {\n    const web3 = this.state.web3;\n    this.state.migrator_contract.methods\n      .doSwap()\n      .send({ from: this.state.address })\n      .on(\"receipt\", () => {\n        this.evalStatus(this.state.address, this.state.networkID, web3);\n      })\n      .on(\"confirmation\", () => {\n        this.evalStatus(this.state.address, this.state.networkID, web3);\n      });\n  }\n\n  async evalStatus(address, networkId, web3) {\n    const BN = web3.utils.BN.BN;\n    if (networkId === SUPPORTED_NETWORK) {\n      const old_token = new web3.eth.Contract(\n        ERC20.abi,\n        STCV1ADDR[SUPPORTED_NETWORK]\n      );\n      const new_token = new web3.eth.Contract(\n        ERC20.abi,\n        STCV2ADDR[SUPPORTED_NETWORK]\n      );\n      const migrator_contract = new web3.eth.Contract(\n        STCSwapper.abi,\n        MIGRATORADDR[SUPPORTED_NETWORK]\n      );\n      const oldBalance = new BN(\n        await old_token.methods.balanceOf(address).call()\n      );\n      const oldAllowance = new BN(\n        await old_token.methods\n          .allowance(address, MIGRATORADDR[SUPPORTED_NETWORK])\n          .call()\n      );\n\n      const migratorETHBalance = await web3.eth.getBalance(\n        MIGRATORADDR[SUPPORTED_NETWORK]\n      );\n      const migratorSTCV2Balance = new BN(\n        await new_token.methods\n          .balanceOf(MIGRATORADDR[SUPPORTED_NETWORK])\n          .call()\n      );\n      const eligibleForRefund = oldBalance.gte(new BN(1000000));\n      const canMigratorRefund = false; // TODO\n      const canSwap = migratorSTCV2Balance.gte(\n        oldBalance.mul(new BN(10 ** 10)).mul(new BN(10 ** 6))\n      );\n      const wasApproved = oldAllowance.gte(oldBalance);\n\n      this.setState({\n        migrator_contract,\n        old_token,\n        new_token,\n        oldBalance,\n        oldAllowance,\n        migratorETHBalance,\n        migratorSTCV2Balance,\n        eligibleForRefund,\n        canMigratorRefund,\n        canSwap,\n        wasApproved,\n      });\n    }\n  }\n\n  subscribeProvider(provider) {\n    if (!provider.on) {\n      return;\n    }\n    /* TODO: Make is saner - don't reload the app... */\n    provider.on(\"close\", () => {\n      window.location.reload(false);\n    });\n    provider.on(\"accountsChanged\", async () => {\n      window.location.reload(false);\n    });\n    provider.on(\"chainChanged\", async () => {\n      window.location.reload(false);\n    });\n\n    provider.on(\"networkChanged\", async () => {\n      window.location.reload(false);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div>\n            <img src={logoSTC} className=\"App-logo\" alt=\"logo\" />\n            <div className=\"App-logo-text\">\n              <h2>STCV2 Token migration</h2>\n              {!this.state.eula ? (\n                <div>\n                  <div className=\"App-eula\">\n                    <ol>\n                      <li>\n                        {\" \"}\n                        Only access this app if you&aposre a holder of STCV1{\" \"}\n                      </li>\n                      <li>\n                        {\" \"}\n                        NEVER send STCV1 directly to the migration contract{\" \"}\n                      </li>\n                      <li> If you disregarded 2) then contact STC support </li>\n                      <li>\n                        {\" \"}\n                        You need to have ETH in your wallet in order to swap\n                        STCV1 for STCV2{\" \"}\n                      </li>\n                      <li> The swap is irreversible </li>\n                      <li>\n                        {\" \"}\n                        We will swap all of your STCV1 - smaller swaps are\n                        disallowed{\" \"}\n                      </li>\n                      <li> We will ask you to perform 2 ETH transactions </li>\n                      <li>\n                        {\" \"}\n                        When swapping more than 10k STCV1 you will receive a\n                        full/partial gas refund for both transactions{\" \"}\n                      </li>\n                      <li>\n                        {\" \"}\n                        The migration bonus might be changed at any time - right\n                        now the gas refund is 0.01 ETH{\" \"}\n                      </li>\n                    </ol>\n                  </div>\n                  <Button\n                    variant=\"warning\"\n                    size=\"lg\"\n                    onClick={() => {\n                      this.setState({ eula: true });\n                    }}\n                  >\n                    I understand what I&aposm doing\n                  </Button>\n                </div>\n              ) : !this.state.connected ? (\n                <div>\n                  <Button\n                    variant=\"success\"\n                    size=\"lg\"\n                    onClick={this.onConnect.bind(this)}\n                  >\n                    Connect wallet\n                  </Button>\n                </div>\n              ) : this.state.chainId !== SUPPORTED_NETWORK ? (\n                <Alert variant=\"danger\">\n                  {\" \"}\n                  Unsupported network id! Please switch to{\" \"}\n                  {NETWORKS[SUPPORTED_NETWORK]}{\" \"}\n                </Alert>\n              ) : this.state.oldBalance.isZero() ? (\n                <Alert variant=\"success\">\n                  {\" \"}\n                  You don&apost hold any STCV1 tokens{\" \"}\n                </Alert>\n              ) : (\n                <div>\n                  <div> Double check that you use the correct account </div>\n                  <div> Connected account: {this.state.address} </div>\n                  <div>\n                    {\" \"}\n                    STCV1 balance:{\" \"}\n                    {this.state.oldBalance\n                      .div(new this.state.BN(10 ** 2))\n                      .toString()}{\" \"}\n                  </div>\n                  <div>\n                    {\" \"}\n                    Migrators STCV1 allowance:{\" \"}\n                    {this.state.oldAllowance\n                      .div(new this.state.BN(10 ** 2))\n                      .toString()}{\" \"}\n                  </div>\n                  <div>\n                    {\" \"}\n                    STCV2 available swap supply:{\" \"}\n                    {this.state.web3.utils.fromWei(\n                      this.state.migratorSTCV2Balance\n                    )}{\" \"}\n                  </div>\n                  <div>\n                    {\" \"}\n                    {this.state.eligibleForRefund\n                      ? \"Eligible for gas refund - at the end of the migration you will receive a small ETH refund\"\n                      : \"You're not eligible for a gas refund - you hold less than 10k STCV1\"}{\" \"}\n                  </div>\n\n                  {!this.state.canSwap ? (\n                    <Alert variant=\"danger\">\n                      {\" \"}\n                      Migration contract has insufficient STCV2 - contact STC\n                      support.{\" \"}\n                    </Alert>\n                  ) : !this.state.wasApproved ? (\n                    <div>\n                      <Button\n                        variant=\"success\"\n                        size=\"lg\"\n                        onClick={this.doApprove.bind(this)}\n                      >\n                        Approve swap?\n                      </Button>\n                      <div>\n                        {\" \"}\n                        In case the approval got confirmed and the app\n                        didn&apost acknowledge that then reload the Dapp{\" \"}\n                      </div>\n                    </div>\n                  ) : (\n                    <Button\n                      variant=\"success\"\n                      size=\"lg\"\n                      onClick={this.doSwap.bind(this)}\n                    >\n                      Swap STCV1 for STCV2?\n                    </Button>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}